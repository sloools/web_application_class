- EX 1 -

create table student(
    student_id INTEGER PRIMARY KEY,
    name VARCHAR(10),
    year TINYINT DEFAULT '1',
    dept_no INTEGER,
    major VARCHAR(10) NOT NULL
    );

자료형 변경
alter table `student` CHANGE `major` `major` VARCHAR(30);

columns 확인
show columns FROM student;

columns 제거
ALTER TABLE student DROP gender;


CREATE table department(
dept_no INTEGER PRIMARY KEY AUTO_INCREMENT, 
dept_name VARCHAR(20) UNIQUE,  // 중복 불가
office VARCHAR(20),
office_tel VARCHAR(13) NOT NULL
);

- EX 2 -
INSERT INTO student
VALUES
(20070002, 'Jane Smith', 3, 4, 'Business Administration'),
(20060001, 'Ashley Jackson', 4, 4, 'Business Administration'),
(20030001, 'Liam Johnson', 4, 2, 'Electrical Engineering'),
(20040003, 'Jacob Lee', 3, 2, 'Electrical Engineering'),
(20060002, 'Noah Kim', 3, 1, 'Computer Science'),
(20100002, 'Ava Lim', 3, 4, 'Business Administration'),
(20110001, 'Emma Watson', 2, 1, 'Computer Science'),
(20080003, 'Lisa Maria', 4, 3, 'Law'),
(20040002, 'Jacob William', 4, 5, 'Law'),
(20070001, 'Emily Rose', 4, 4, 'Business Administration'),
(20100001, 'Ethan Hunt', 3, 4, 'Business Administration'),
(20110002, 'Jason Mraz', 2, 1, 'Electrical Engineering'),
(20030002, 'John Smith', 5, 1, 'Computer Science'),
(20070003, 'Sophia Park', 4, 3, 'Law'),
(20070007, 'James Michael', 2, 4, 'Business Administration'),
(20100003, 'James Bond', 3, 1, 'Computer Science'),
(20070005, 'Olivia Madison', 2, 5, 'English Language and Literature');


INSERT INTO department (dept_name, office, office_tel)
VALUES
('Computer Science', 'Science Building 101', '02-3290-0123'),
('Electrical Engineering', 'Engineering Building 401', '02-3290-2345'),
('Law', 'Law Building 201', '02-3290-7896'),
( 'Business Administration', 'Business Building 104', '02-3290-1112'),
('English Language and Literature', 'Language Building 303', '02-3290-4412');
// 이렇게 해주면 dept_no 가 16, 17 ,18, 19, 20 이렇게 나온다.

dept_no 변경해줘야 겠다.

REPLACE INTO department
VALUES 
(1, 'Computer Science', 'Science Building 101', '02-3290-0123'),
(2, 'Electrical Engineering', 'Engineering Building 401', '02-3290-2345'),
(3, 'Law', 'Law Building 201', '02-3290-7896'),
(4, 'Business Administration', 'Business Building 104', '02-3290-1112'),
(5, 'English Language and Literature', 'Language Building 303', '02-3290-4412');

- EX 3 -

UPDATE student SET major= 'Electrical and Electronics Engineering' where major = 'Electrical Engineering';
UPDATE department SET dept_name= 'Electrical and Electronics Engineering' where dept_name = 'Electrical Engineering';

INSERT INTO department VALUES(6, 'Special Education', 'Education Building 403', '02-3290-2347');
// 그냥 이렇게 넣으면 dept_no 에 random number 생김. dept_no 표시해줘야함

UPDATE student SET major = 'Special Education' where name = 'Emma Watson';

DELETE FROM student where name = 'John Smith';


- EX 4 -

SELECT * FROM student where major = 'Computer Science';

SELECT student_id, year, major FROM student;

SELECT * FROM student where year='3';

SELECT * FROM student where year='2' OR year='1';

SELECT * FROM department JOIN student ON student.dept_no = department.dept_no WHERE dept_name = 'Business Administration';

- EX 5 -

SELECT * FROM student WHERE student_id LIKE "%2007%";

SELECT * FROM student ORDER BY student_id;

SELECT major, AVG(year) FROM student GROUP BY major HAVING AVG(year) > '3';

SELECT * FROM student WHERE major = 'Business Administration' AND student_id LIKE "%2007%" LIMIT 2;


- EX 6 -

SELECT roles.role FROM roles JOIN movies ON movies.id=roles.movie_id WHERE movies.name = 'Pi';

SELECT actors.first_name, actors.last_name FROM actors 
JOIN roles ON actors.id=roles.actor_id
JOIN movies ON movies.id=roles.movie_id
WHERE movies.name='Pi';

SELECT actors.first_name, actors.last_name
FROM actors 
JOIN roles r1 ON actors.id=r1.actor_id
JOIN movies m1 ON m1.id=r1.movie_id
JOIN roles r2 ON actors.id=r2.actor_id
JOIN movies m2 ON m2.id=r2.movie_id
WHERE m1.name='Kill Bill: Vol. 1' AND m2.name='Kill Bill: Vol. 2';

SELECT actors.first_name, actors.last_name,COUNT(actors.id) FROM actors
JOIN roles ON actors.id=roles.actor_id
GROUP BY actors.id ORDER BY COUNT(actors.id) DESC LIMIT 7;

SELECT mg.genre FROM movies_genres mg
JOIN movies ON mg.movie_id=movies.id
GROUP BY mg.genre ORDER BY COUNT(mg.movie_id) DESC LIMIT 3;

SELECT dir.first_name, dir.last_name, movies.rank FROM directors dir
JOIN movies_directors m_d ON dir.id=m_d.director_id
JOIN movies ON m_d.movie_id=movies.id 
JOIN movies_genres m_g ON m_g.movie_id=movies.id
WHERE m_g.genre='Thriller'
ORDER BY movies.rank DESC LIMIT 1;

- EX 7 -

SELECT grades.grade FROM grades
JOIN courses ON grades.course_id=courses.id
WHERE courses.name='Computer Science 143';

SELECT st.name, grades.grade FROM students st
JOIN grades ON st.id=grades.student_id
JOIN courses ON grades.course_id=courses.id
WHERE courses.name='Computer Science 143' AND grades.grade<='B-'; 

SELECT st.name, courses.name, grades.grade FROM students st
JOIN grades ON st.id=grades.student_id
JOIN courses ON grades.course_id=courses.id
WHERE grades.grade<='B-' ORDER BY courses.name, grades.grade;

SELECT courses.name, COUNT(courses.id) FROM courses
JOIN grades ON courses.id=grades.course_id
JOIN students st ON grades.student_id=st.id
GROUP BY courses.id HAVING COUNT(courses.id) >= 2;
